/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// cd_add_random_treasure, v2021.09.23              \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

DEFINE_ACTION_FUNCTION cd_add_random_treasure
  STR_VAR cd_random_table = ~~
          cd_random_item  = ~~
  RET     cd_random_item_return
  BEGIN
  
  OUTER_SPRINT cd_random_item_return ~~
  
  ACTION_IF (("%cd_random_table%"  STRING_COMPARE_CASE "" = 0) OR
             ("%cd_random_item%"  STRING_COMPARE_CASE "" = 0)) BEGIN // sanity check

    PRINT ~Parameters not specified, nothing added.~
    
  END ELSE BEGIN  

    OUTER_INNER_PATCH_SAVE cd_random_table ~%cd_random_table%~ BEGIN // some basic cleanup first
      REPLACE_TEXTUALLY ~%TAB%~ ~ ~
      REPLACE_TEXTUALLY ~ +~ ~ ~
    END  
  
    ACTION_IF FILE_EXISTS_IN_GAME ~rndtres.2da~ BEGIN // for iwd or the EEs
      
      OUTER_SPRINT cd_random_item_return ~%cd_random_item%~
    
      ACTION_IF !GAME_IS ~iwd how totlm~ BEGIN // need to pad out entry if EEs
      
        COPY_EXISTING ~rndtres.2da~ ~override~
          COUNT_2DA_COLS columns
          BUT_ONLY
      
        OUTER_INNER_PATCH_SAVE cd_random_table ~%cd_random_table%~ BEGIN
          COUNT_REGEXP_INSTANCES ~ +[^ ]~ cd_random_padding
          FOR (cd_random_index = cd_random_padding ; cd_random_index < (columns - 2) ; ++cd_random_index) BEGIN // -2: C_R_E doesn't count first entry; columns is +1 because it includes item
            REPLACE_TEXTUALLY ~$~ ~ *~
          END
        END
        
      END  
    
      APPEND ~rndtres.2da~ ~%cd_random_item% %cd_random_table%~
    
    END ELSE BEGIN // for bg2-style tables 
    
      // pad out to 20 entries
      OUTER_INNER_PATCH_SAVE cd_random_table ~%cd_random_table%~ BEGIN
        COUNT_REGEXP_INSTANCES ~ +[^ ]~ cd_random_padding
      END  
      OUTER_WHILE cd_random_padding < 19 BEGIN
        OUTER_INNER_PATCH_SAVE cd_random_table ~%cd_random_table%~ BEGIN
          REPLACE_TEXTUALLY ~$~ ~ %cd_random_table%~
          COUNT_REGEXP_INSTANCES ~ +[^ ]~ cd_random_padding
        END 
      END
      OUTER_INNER_PATCH_SAVE cd_random_table ~%cd_random_table%~ BEGIN
        REPLACE_TEXTUALLY ~^\([^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+\).+~ ~\1~
      END 
    
      COPY_EXISTING ~rndtreas.2da~ ~override~
        COUNT_2DA_ROWS 20 cd_rndtreas_rows
        BUT_ONLY
      
      ACTION_IF cd_rndtreas_rows >= 42 BEGIN
        PRINT ~Random treasure table already full, nothing added.~
      END ELSE
      ACTION_IF cd_rndtreas_rows < 9 BEGIN
        OUTER_SET cd_random_symbol = cd_rndtreas_rows + 1
        APPEND ~rndtreas.2da~ ~%cd_random_item% %cd_random_table%~
        OUTER_SPRINT cd_random_item_return ~rndtre0%cd_random_symbol%~
      END ELSE BEGIN
        ACTION_IF cd_rndtreas_rows < 16 BEGIN // if in 'dead symbol' zone, pad out to 17 to get back into letters
          OUTER_FOR (index = cd_rndtreas_rows ; index < 16 ; ++index) BEGIN
            APPEND ~rndtreas.2da~ ~cdnull%index% 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001~
          END  
          OUTER_SET cd_rndtreas_rows = 16
        END
        APPEND ~rndtreas.2da~ ~%cd_random_item% %cd_random_table%~ 
        
        OUTER_SET cd_random_symbol = 49 + cd_rndtreas_rows  
<<<<<<<< ./cd_rndtreas.txt
rndtre00
>>>>>>>>
        COPY ~./cd_rndtreas.txt~ ~./cd_rndtreas.txt~
          WRITE_BYTE 0x07 ~%cd_random_symbol%~
          READ_ASCII 0x00 cd_random_item_return (8) 
      END       

    END // end rndtres vs. rndtreas 
    
  END // end sanity check

END // end function

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// make hiqh quality weapon                         \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

DEFINE_ACTION_FUNCTION cd_make_hq_weapon
  STR_VAR base_item = ~~ 
          hq_item   = ~~   
BEGIN

  COPY_EXISTING ~%base_item%.itm~ ~override/%hq_item%.itm~
    WRITE_ASCIIE 0x3a ~%hq_item%~   
    WRITE_LONG   0x34 (THIS * 2) // double the price; iwd quintuples it but that seems extreme  
    READ_LONG    0x64 abil_off
    READ_SHORT   0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      READ_BYTE (abil_off +        (index * 0x38)) type
      PATCH_IF ((type != 0) AND (type != 3)) BEGIN // not default, magic
        WRITE_ASCIIE (abil_off + 0x04 + (index * 0x38)) ~%hq_item%~              
        WRITE_SHORT  (abil_off + 0x14 + (index * 0x38)) (THIS + 1) 
        READ_SHORT   (abil_off + 0x14 + (index * 0x38)) thac0         
      END
    END    
    PATCH_IF (source_1 OR source_2 OR source_3) BEGIN // recolor paperdoll
      READ_LONG  0x6a fx_off
      READ_SHORT 0x6e fx_idx
      READ_SHORT 0x70 fx_num
      FOR (index = 0 ; index < fx_num ; ++index) BEGIN
        READ_SHORT (fx_off + 0x00 + ((fx_idx + index) * 0x30)) opcode
        PATCH_IF opcode = 7 BEGIN
          READ_LONG  (fx_off + 0x08 + ((fx_idx + index) * 0x30)) loc
          PATCH_IF ((loc = 16) AND (source_1 != 0)) BEGIN
            WRITE_LONG  (fx_off + 0x04 + ((fx_idx + index) * 0x30)) source_1
          END ELSE  
          PATCH_IF ((loc = 20) AND (source_2 != 0)) BEGIN
            WRITE_LONG  (fx_off + 0x04 + ((fx_idx + index) * 0x30)) source_2
          END ELSE  
          PATCH_IF ((loc = 21) AND (source_3 != 0)) BEGIN
            WRITE_LONG  (fx_off + 0x04 + ((fx_idx + index) * 0x30)) source_3
          END 
        END
      END
    END      
    PATCH_FOR_EACH offset IN 0x08 0x0c BEGIN
      READ_LONG ~%offset%~ name_strref
      PATCH_IF (name_strref >= 0 && name_strref < 2147483646) BEGIN
        READ_STRREF ~%offset%~ name
        INNER_PATCH_SAVE name ~%name%~ BEGIN
          REPLACE_TEXTUALLY ~\(%name%\)~ ~%name_prefix%\1%name_suffix%~
        END
        SAY offset ~%name%~
      END
    END 
    PATCH_FOR_EACH offset IN 0x50 0x54 BEGIN
      READ_LONG ~%offset%~ desc_strref
      PATCH_IF (desc_strref >= 0 && desc_strref < 2147483646) BEGIN
        READ_STRREF ~%offset%~ desc
        INNER_PATCH_SAVE desc ~%desc%~ BEGIN
          PATCH_IF thac0 = 1 BEGIN // if it needs a new line
            REPLACE_TEXTUALLY ~\(%desc_stats%\)~ ~\1%desc_new%%thac0%
~
          END ELSE BEGIN
            REPLACE_TEXTUALLY ~%desc_thac0%~ ~%desc_new%%thac0%~
          END
        END
        SAY offset ~%desc%~
      END
    END 

END      

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// add profs for random weapons                     \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

DEFINE_ACTION_FUNCTION cd_match_random_profs
  INT_VAR old_bg2_prof = 0
          prof_lsword  = 0 // Bastard swords, Two handed swords, Long Swords, and Scimitars
          prof_ssword  = 0 // Daggers and Short swords
          prof_bow     = 0 // Long bows, Composite Long bows, and Short bows
          prof_spear   = 0 // Spears and Halberds
          prof_blunt   = 0 // Maces, Clubs, Warhammers, and the Staff
          prof_spiked  = 0 // Morning Stars and Flails
          prof_axe     = 0 // Battle axes and Throwing axes
          prof_missile = 0 // Slings, Darts, and Crossbows 
  STR_VAR old_item  = ~~ 
          new_item  = ~~   
          creature  = ~~   
          slot      = ~~ 
          comp_item = ~~ 
BEGIN

  ACTION_IF FILE_EXISTS_IN_GAME ~%creature%.cre~ BEGIN

    ACTION_CLEAR_ARRAY cd_bgprofs
    ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_bgprofs BEGIN 
      1 => "%prof_lsword%"
      2 => "%prof_ssword%"
      3 => "%prof_bow%"
      4 => "%prof_spear%"
      5 => "%prof_blunt%"
      6 => "%prof_spiked%"
      7 => "%prof_axe%"
      8 => "%prof_missile%"
    END 
    
    COPY_EXISTING ~%creature%.cre~ ~override~
      PATCH_IF ("%comp_item%" STRING_COMPARE_CASE "") BEGIN // if we're dealing with a comp item
        SPRINT replacement ~%comp_item%~
        SET delete_old = 1
      END ELSE BEGIN  
        SPRINT replacement ~%old_item%~
        SET delete_old = 0
      END
      SET match = 0
      SET profs = 0
      CLEAR_ARRAY cd_check_slots
      PATCH_IF ("%slot%" STRING_COMPARE_CASE "weapon" = 0) BEGIN
        SET profs = 1
        DEFINE_ASSOCIATIVE_ARRAY cd_check_slots BEGIN 
          weapon1 => 0x12
          weapon2 => 0x14
          weapon3 => 0x16
          weapon4 => 0x18
        END  
      END ELSE
      PATCH_IF ("%slot%" STRING_COMPARE_CASE "quiver" = 0) BEGIN
        DEFINE_ASSOCIATIVE_ARRAY cd_check_slots BEGIN 
          quiver1 => 0x1a
          quiver2 => 0x1c
          quiver3 => 0x1e
        END  
      END ELSE
      PATCH_IF ("%slot%" STRING_COMPARE_CASE "helmet" = 0) BEGIN
        DEFINE_ASSOCIATIVE_ARRAY cd_check_slots BEGIN helmet  => 0x00 END
      END ELSE  
      PATCH_IF ("%slot%" STRING_COMPARE_CASE "armor" = 0) BEGIN
        DEFINE_ASSOCIATIVE_ARRAY cd_check_slots BEGIN armor   => 0x02 END
      END ELSE   
      PATCH_IF ("%slot%" STRING_COMPARE_CASE "offhand" = 0) BEGIN
        DEFINE_ASSOCIATIVE_ARRAY cd_check_slots BEGIN offhand => 0x04 END
      END  
      READ_LONG 0x2b8 slot_off
      READ_LONG 0x2bc item_off
      READ_LONG 0x2b0 item_num
      PATCH_PHP_EACH cd_check_slots AS slot => offset BEGIN
        READ_SHORT (slot_off + offset) itm_idx
        PATCH_IF (itm_idx < item_num) BEGIN // sanity check
          READ_ASCII (item_off + 0x00 + (itm_idx * 0x14)) item
          PATCH_IF (("%replacement%" STRING_COMPARE_CASE "%item%" = 0) OR 
                    ("%replacement%" STRING_COMPARE_CASE "" = 0)) BEGIN 
            WRITE_ASCIIE (item_off + 0x00 + (itm_idx * 0x14)) ~%new_item%~ // actually replace weapon
            SET match = 1
          END
        END
      END  
      PATCH_IF match BEGIN // only if we matched
        PATCH_IF delete_old BEGIN // delete real item in inventory if match found and comp item is used  
          LPF DELETE_CRE_ITEM STR_VAR item_to_delete = EVAL ~%old_item%~ END
        END         
        PATCH_IF profs BEGIN // let's start with the prof changes if new item added
          SET min_prof = 1
          PATCH_IF old_bg2_prof BEGIN
            READ_LONG 0x2c4 fx_off
            READ_LONG 0x2c8 fx_num
            READ_BYTE 0x33  fx_type
            FOR (index = 0 ; index < fx_num ; ++index) BEGIN
              READ_SHORT (fx_off + (fx_type * 0x08) + 0x00 + ((0x30 + (fx_type * 0xd8)) * index)) opcode
              PATCH_IF opcode = 233 BEGIN
                READ_SHORT (fx_off + (fx_type * 0x10) + 0x04 + ((0x30 + (fx_type * 0xd8)) * index)) stars
                READ_SHORT (fx_off + (fx_type * 0x10) + 0x08 + ((0x30 + (fx_type * 0xd8)) * index)) prof
                PATCH_IF ((old_bg2_prof = prof) AND (stars > min_prof)) BEGIN
                  SET min_prof = stars
                END
              END
            END  
          END
          PATCH_PHP_EACH cd_bgprofs AS offset => value BEGIN
            PATCH_IF value = 2 BEGIN
              READ_BYTE (0x6d + offset) stars
              PATCH_IF (stars > min_prof) BEGIN
                SET min_prof = stars
              END
            END
          END
          PATCH_IF min_prof > 5 BEGIN SET min_prof = 5 END  
          PATCH_PHP_EACH cd_bgprofs AS offset => value BEGIN
            PATCH_IF value > 0 BEGIN
              READ_BYTE (0x6d + offset) stars
              PATCH_IF (stars < min_prof) BEGIN
                WRITE_BYTE (0x6d + offset) min_prof // also updates =2 to transfer 233 stars to these, primarily for short bow/long bow overlap
              END
            END
          END
        END 
      END  
      BUT_ONLY    
          
   END
   
END   
 